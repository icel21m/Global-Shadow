<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_Player_Walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
hsp = 0;
vsp = 0;
maxSpeed = 4;
moveSpeed = 0.7;
directionSpeed = 5;
backwardModifier = 0.5;
maxGravity = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_W = keyboard_check(ord('W'));
key_S = keyboard_check(ord('S'));
key_A = keyboard_check(ord('A'));
key_D = keyboard_check(ord('D'));
key_Space = keyboard_check_pressed(vk_space);

/*
if (key_W + key_S != 0)
{
    if (alarm[0] = -1)
        alarm[0] = 3;
}*/

//React to inputs
if (key_A)
{
    direction += directionSpeed;
}

if (key_D)
{
    direction -= directionSpeed;
}

image_angle = direction;

if (key_S-key_W != 0)
{
    hsp += ((key_S*backwardModifier-key_W) * moveSpeed)*sin(direction*pi/180);
    vsp += ((key_S*backwardModifier-key_W) * moveSpeed)*cos(direction*pi/180);
}

gravDirection = point_direction(x,y,obj_Ast1.x,obj_Ast1.y);
distance = distance_to_object(obj_Ast1);


if (distance &gt; 0)
{
    if (cos(gravDirection*pi/180) !=0)
        gravX = obj_Ast1.mass/power(distance*cos(gravDirection*pi/180), 2);
    if (sin(gravDirection*pi/180) !=0)
        gravY = obj_Ast1.mass/power(distance*sin(gravDirection*pi/180), 2);
    if (gravX &gt; maxGravity)
        gravX = maxGravity;
    if (gravY &gt; maxGravity)
        gravY = maxGravity;
        
    gravX = abs(0.6*cos(gravDirection*pi/180)/distance);
    gravY = abs(0.6*sin(gravDirection*pi/180)/distance);
}



hsp += sign(cos(gravDirection*pi/180))*gravX;
vsp -= sign(sin(gravDirection*pi/180))*gravY;

/*
if (abs(obj_Ast1.x-x) &gt; 2)
{
    hsp += sign(obj_Ast1.x-x)*obj_Ast1.mass/power((obj_Ast1.x-x), 2);
}
if (abs(obj_Ast1.y-y) &gt; 2)
{
    vsp += sign(obj_Ast1.y-y)*obj_Ast1.mass/power((obj_Ast1.y-y), 2);
}
*/
if (hsp &gt; maxSpeed)
    hsp = maxSpeed;
else if (hsp &lt; -maxSpeed)
    hsp = -maxSpeed;
if (vsp &gt; maxSpeed)
    vsp = maxSpeed;
else if (vsp &lt; -maxSpeed)
    vsp = -maxSpeed;


x += hsp;
y += vsp;


/*

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,91</point>
    <point>47,47</point>
  </PhysicsShapePoints>
</object>
